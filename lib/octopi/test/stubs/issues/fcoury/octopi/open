HTTP/1.1 200 OK
Server: nginx/0.6.26
Date: Sat, 01 Aug 2009 07:15:13 GMT
Content-Type: application/x-yaml; charset=utf-8
Connection: keep-alive
Set-Cookie: _github_ses=BAh7BiIKZmxhc2hJQzonQWN0aW9uQ29udHJvbGxlcjo6Rmxhc2g6OkZsYXNoSGFzaHsABjoKQHVzZWR7AA%3D%3D--884981fc5aa85daf318eeff084d98e2cff92578f; path=/; expires=Wed, 01 Jan 2020 08:00:00 GMT; HttpOnly
Status: 200 OK
X-Runtime: 2710ms
ETag: "af9e28c8abb3bd93187b687df6d0ae6e"
Cache-Control: private, max-age=0, must-revalidate
Content-Length: 14668

--- 
issues: 
- user: jamescallmebrent
  updated_at: 2009-06-05 21:38:57 -07:00
  body: |-
    Gist of the trace: http://gist.github.com/120603
    Example of code that yields error: http://gist.github.com/120604
  title: reading commits from a private repo raises error
  number: 28
  votes: 3
  closed_at: 
  labels: []

  created_at: 2009-05-30 12:03:03 -07:00
  state: open
- user: Rodreegez
  updated_at: 2009-06-05 21:38:57 -07:00
  body: |-
    When trying to grab a commit from a private repo the following error is raised. This same code works fine if the repo is public. 
    
    Trace: http://gist.github.com/121392
    Example: http://gist.github.com/121394
  title: Error getting commits from a single private repository
  number: 29
  votes: 1
  closed_at: 
  labels: []

  created_at: 2009-06-01 06:20:47 -07:00
  state: open
- user: runpaint
  updated_at: 2009-06-05 21:38:57 -07:00
  body: "Am I missing something, or is this a bug?\n\n    authenticated do |g|\n      p g.user\n    end\n\n    #<Octopi::User:0xb781c880 @following_count=1, @public_repo_count=4, @followers_count=0, @location=nil, @name=nil, @company=nil, @id=70802, @keys=[\"company\", \"name\", \"created_at\", \"location\", \"blog\", \"public_repo_count\", \"public_gist_count\", \"following_count\", \"id\", \"followers_count\", \"login\", \"email\"], @public_gist_count=2, @email=\"\", @blog=nil, @login=\"runpaint\", @created_at=Sun Apr 05 22:57:13 +0100 2009, @api=#<Octopi::Api:0xb78219e8 @read_only=false, @format=\"yaml\", @token=\"REDACTED\", @login=\"runpaint\">>\n\n\
    Attributes such as _disk_usage_ and the _plan_ hash that are returned for authenticated users aren't available. \n\n\
    Using the `curl` trace mode I see the correct URL generated that, when fetched by `curl`, shows the correct data. This proves that my credentials are getting picked up and are right. Putting in some `puts` statements I see that the call to HTTParty isn't returning the complete data set. However, it doesn't seem to be a HTTParty bug because the following test script works fine:\n\n    class Foo\n      require 'httparty'\n      include HTTParty\n      format :yaml\n      def do\n        p self.class.get('http://localhost/runpaint.yaml')\n      end\n    end\n\n\
    (`http://localhost/runpaint.yaml` is the YAML downloaded with `curl`).\n\n\
    Anybody want to tell me that I'm being stupid before I look into this further?\n "
  title: "Authenticated #user Method Returns Incomplete Data?"
  number: 26
  votes: 0
  closed_at: 
  labels: 
  - bug
  created_at: 2009-04-22 18:21:42 -07:00
  state: open
- user: runpaint
  updated_at: 2009-07-30 18:42:54 -07:00
  body: Attributes that have dates as values should be coerced into a date object so objects of the same type can be compared with respect to their date. For instance, Issue objects have .created_at and .updated_at.
  title: Date Attribues Should be Date Objects
  number: 9
  votes: 0
  closed_at: 
  labels: 
  - Planned
  created_at: 2009-04-20 10:25:34 -07:00
  state: open
- user: runpaint
  updated_at: 2009-06-05 21:38:57 -07:00
  body: A Blob.find(user, repo, sha, path) object is effectively a string; the raw contents of the named file. It should automatically stringify so you can treat it as a String, or return an actual String.
  title: Raw Blob Objects Should Act as Strings
  number: 1
  votes: 0
  closed_at: 
  labels: []

  created_at: 2009-04-20 08:10:36 -07:00
  state: open
- user: runpaint
  updated_at: 2009-07-30 19:39:10 -07:00
  body: |-
    We should be caching the response from GitHub. The implementation for this depends on:
    
    * How we integrate caching into HTTParty, if not there already.
    * Whether GitHub returns useful caching metadata, and if not will it?
    
    The logic would have to realise that the format of the data is irrelevant, i.e. if we already have a resource in YAML and the user has requested XML, we hit the cache and reformat the data locally.
    
    In the absence of useful caching metadata, we'd need to hard-code assumptions. For instance the raw blob of a specific commit of a specific file would never change, so a sucessful response could be cached indefinitely.
  title: Cache API Responses
  number: 4
  votes: 0
  closed_at: 
  labels: []

  created_at: 2009-04-20 08:30:15 -07:00
  state: open
- user: runpaint
  updated_at: 2009-06-05 21:38:57 -07:00
  body: |-
    The API documentation hints that users are limited to a maximum of sixty requests per minute. We need to detect when we are being limited, and if necessary perform exponential backoff until the window has elapsed.
    
    Hopefully we'll be able to detect rate limiting by looking at the status code, but if not we may need to use an internal counter.
  title: Handle Rate Limiting
  number: 5
  votes: 0
  closed_at: 
  labels: 
  - Good to have
  created_at: 2009-04-20 08:33:54 -07:00
  state: open
- user: runpaint
  updated_at: 2009-06-05 21:38:57 -07:00
  body: |-
    Many objects that we create have attributes that imply other objects. For example, the .owner attribute of a repository returns a String representation of the owner's name, but it could more usefully return a User object representing the same user. It would be expensive to handle this naively, so we ideally want an architecture that will automatically instantiate such objects on demand. If the caller just wants the owner's name,return a string; if he wants the owner's e-mail address, create a User object and call the .email method.
    
    We currently handle one of these cases by accepting a parameter specifying whether the caller wants objects or strings for User objects, but given the prevalence of such cases a general, "do the right thing" approach would be optimal.
  title: Lazily Evaluate Implicit Objects
  number: 7
  votes: 1
  closed_at: 
  labels: []

  created_at: 2009-04-20 08:43:39 -07:00
  state: open
- user: runpaint
  updated_at: 2009-07-30 19:43:50 -07:00
  body: The query for Repository.find_all is an Array of words concatenated with '+' signs. Oddly, separating the words with percent-encoded spaces doesn't work. What does this imply about the suitability of URI-escaping the query? We need to do something with special characters, or they'll mess up the URL we generate. Do we just escape as normal, but replace spaces with '+'?
  title: Investigate How Repository.find_all Treats URI Escapes
  number: 8
  votes: 0
  closed_at: 
  labels: []

  created_at: 2009-04-20 08:53:15 -07:00
  state: open
- user: runpaint
  updated_at: 2009-06-05 21:38:57 -07:00
  body: |-
    The Issues API allows the viewing of either open or closed issues, but not both from the same call. This is silly. We want Issues.find_all(user, repo) to return both open and closed issues; Issues.find_all(user, repo, state) would support limiting by state. Currently, the first invocation assumes `state`=open.
    
    If develop/develop.github.com/#16 is fixed, we'll stop providing a default for `state` and this should just work. Otherwise, we may need to make two calls (one for each state) and merge the results. This would only be done in the absence of a `state` parameter.
  title: Support Listing of Issues Regardless of State
  number: 10
  votes: 0
  closed_at: 
  labels: []

  created_at: 2009-04-20 10:40:11 -07:00
  state: open
- user: runpaint
  updated_at: 2009-06-05 21:38:57 -07:00
  body: The GitHub API returns the wrong Content-Type so this call raises an Exception. This is blocked by develop/develop.github.com#13 ; if that gets wontfix'd, we'll need a workaround.
  title: Blob.find(user,repo,sha) Fails Due to Invalid Content-Type
  number: 12
  votes: 0
  closed_at: 
  labels: []

  created_at: 2009-04-20 16:49:00 -07:00
  state: open
- user: runpaint
  updated_at: 2009-06-05 21:38:57 -07:00
  body: All public methods need documenting.
  title: Add RDoc
  number: 3
  votes: 0
  closed_at: 
  labels: 
  - On the works
  created_at: 2009-04-20 08:21:29 -07:00
  state: open
- user: runpaint
  updated_at: 2009-06-05 21:38:57 -07:00
  body: |
    We should probably respect an environment variable whose value is the type of tracing the user wants. This leaves the config files for permanent preferences, such as credentials, and frees client implementations from debug logic. IOW:
    
        $ OCTOPI_DEBUG=curl some-client
    

  title: Consider Honouring ENV['OCTOPI_DEBUG'] for Tracing Pref
  number: 17
  votes: 0
  closed_at: 
  labels: []

  created_at: 2009-04-22 07:14:16 -07:00
  state: open
- user: runpaint
  updated_at: 2009-06-05 21:38:57 -07:00
  body: Given that my [request to return all issues in a single API call](http://github.com/develop/develop.github.com/issues#issue/16) has been marked 'possibly', we need a .all_issues method for Repository objects, so clients don't have to enumerate states.
  title: Create Repository#all_issues Method
  number: 18
  votes: 0
  closed_at: 
  labels: []

  created_at: 2009-04-22 07:20:52 -07:00
  state: open
- user: runpaint
  updated_at: 2009-06-05 21:38:57 -07:00
  body: When API bug [1](http://github.com/develop/develop.github.com/issues#issue/1) is fixed, we should support paginated results for .find_all queries. The right way to do this is make .find_all an iterator that automatically fetches the next page as needed.
  title: "[tracking] Support Paginated Search Results"
  number: 19
  votes: 0
  closed_at: 
  labels: []

  created_at: 2009-04-22 07:24:54 -07:00
  state: open
- user: runpaint
  updated_at: 2009-06-05 21:38:57 -07:00
  body: |+
    I got the following stack trace when running the examples. It's presumably due to my ISP's transparent proxy being flaky, thus implying a bug in Net::HTTP's handling of a pretty common condition, but in any case we should probably handle these type of cases. We can probably deal with this when my [Document Status Codes and Their Implications](http://github.com/develop/develop.github.com/issues#issue/15) issue has been resolved. This would constitute a retryable error, I suspect.
    
        /usr/lib/ruby/1.8/net/http.rb:2022:in `read_status_line': wrong status line: "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"" (Net::HTTPBadResponse)
          from /usr/lib/ruby/1.8/net/http.rb:2009:in `read_new'
          from /usr/lib/ruby/1.8/net/http.rb:1050:in `request'
          from /usr/lib/ruby/1.8/net/http.rb:1037:in `request'
          from /usr/lib/ruby/1.8/net/http.rb:543:in `start'
          from /usr/lib/ruby/1.8/net/http.rb:1035:in `request'
          from /var/lib/gems/1.8/gems/httparty-0.4.2/lib/httparty/request.rb:69:in `perform_actual_request'
          from /var/lib/gems/1.8/gems/httparty-0.4.2/lib/httparty/request.rb:73:in `get_response'
          from /var/lib/gems/1.8/gems/httparty-0.4.2/lib/httparty/request.rb:40:in `perform'
          from /var/lib/gems/1.8/gems/httparty-0.4.2/lib/httparty.rb:156:in `perform_request'
          from /var/lib/gems/1.8/gems/httparty-0.4.2/lib/httparty.rb:122:in `get'
          from ./examples/../lib/octopi.rb:172:in `get'
          from ./examples/../lib/octopi.rb:155:in `submit'
          from ./examples/../lib/octopi.rb:171:in `get'
          from ./examples/../lib/octopi.rb:113:in `find'
          from ./examples/../lib/octopi/resource.rb:34:in `find'
          from ./examples/../lib/octopi/repository.rb:37:in `find'
          from ./examples/../lib/octopi/user.rb:24:in `repository'
          from examples/overall.rb:25
    
  title: Handling of HTTP Errors
  number: 20
  votes: 0
  closed_at: 
  labels: []

  created_at: 2009-04-22 14:18:19 -07:00
  state: open
- user: runpaint
  updated_at: 2009-06-05 21:38:57 -07:00
  body: We need to connect to GitHub.com via HTTPs for authenticated actions. What are the implications of passing all traffic over HTTPs versus choosing the `base_url` on the basis of the call?
  title: Authenticated Queries Should use HTTPS
  number: 22
  votes: 0
  closed_at: 
  labels: []

  created_at: 2009-04-22 14:57:27 -07:00
  state: open
- user: runpaint
  updated_at: 2009-06-05 21:38:57 -07:00
  body: We currently request everything in YAML. Given that HTTParty abstracts the data formats so well, what are the performance implications of requesting YAML versus JSON or XML?
  title: Optimal Response Format
  number: 23
  votes: 0
  closed_at: 
  labels: []

  created_at: 2009-04-22 15:00:50 -07:00
  state: open
- user: runpaint
  updated_at: 2009-06-05 21:38:57 -07:00
  body: If my [issue 26](http://github.com/develop/develop.github.com/issues/#issue/26) is resolved, we need to ensure that where 'master' has been hardcoded as the default branch, the specified branch is used instead. This will also affect the Repository .clone_url method.
  title: "[tracker] Respect Default Branch Setting"
  number: 24
  votes: 0
  closed_at: 
  labels: []

  created_at: 2009-04-22 16:44:06 -07:00
  state: open
- user: runpaint
  updated_at: 2009-06-05 21:38:57 -07:00
  body: `Repository#clone_url` always returns the public clone URL. If a user is authenticated and owns the repository the clone_url should be his private clone URL.
  title: Repository#clone_url Should Return Private Clone URLs Where Appropriate
  number: 25
  votes: 0
  closed_at: 
  labels: []

  created_at: 2009-04-22 16:48:13 -07:00
  state: open
- user: calavera
  updated_at: 2009-07-02 05:37:31 -07:00
  body: |
    This patch solves the error, I didn't include a test because is an obvious error:
    
    From af1f41ad0a29f36db10672ff8cfa09045d99a240 Mon Sep 17 00:00:00 2001
    From: David Calavera <david.calavera@gmail.com>
    Date: Thu, 2 Jul 2009 14:32:05 +0200
    Subject: [PATCH] solves Commit.find error
    
    ---
     lib/octopi/commit.rb |    4 ++--
     1 files changed, 2 insertions(+), 2 deletions(-)
    
    diff --git a/lib/octopi/commit.rb b/lib/octopi/commit.rb
    index 863bd31..ff94256 100644
    --- a/lib/octopi/commit.rb
    +++ b/lib/octopi/commit.rb
    @@ -39,9 +39,9 @@ module Octopi
             commit = args.pop
             super "#{commit.repo_identifier}"
           else
    -        user, name, sha = *args
    +        user, repo, sha = *args
             user = user.login if user.is_a? User
    -        name = repo.name  if name.is_a? Repository
    +        name = repo.is_a?(Repository) ? repo.name : repo
             self.validate_args(user => :user, name => :repo, sha => :sha)
             super [user, name, sha]
           end
    -- 
    1.6.0.4

  title: Commit.find raises an error because variable "repo" is not defined
  number: 30
  votes: 0
  closed_at: 
  labels: []

  created_at: 2009-07-02 05:37:07 -07:00
  state: open
